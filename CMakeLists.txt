# Starter project template for STM32
cmake_minimum_required(VERSION 3.2)
project(starter-template)
set(PROJECT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/PROJECT)
############################### MCU Details ############################### 
# Set MCU family & specific model
set(MCU_FAMILY STM32F4xx)
set(MCU_MODEL STM32F411xE)
# Set parameters of the CPU
set(CPU_PARAMETERS
    -mcpu=cortex-m4
    -mthumb
    -mfpu=fpv4-sp-d16
    -mfloat-abi=hard
)

# Set startup script genereted by the STM32CubeMX
set(STARTUP_SCRIPT ${CMAKE_CURRENT_SOURCE_DIR}/CubeMX/startup_stm32f411xe.s)
# Set linker script genereted by the STM32CubeMX
set(MCU_LINKER_SCRIPT ${CMAKE_CURRENT_SOURCE_DIR}/CubeMX/STM32F411VETx_FLASH.ld)

############################### Languages ############################### 
set(EXECUTABLE ${CMAKE_PROJECT_NAME})
# Enable C, CPP & Assembly
enable_language(C CXX ASM)
# C Standard configuration
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS ON)
# Cpp Standard configuration
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS ON)

############################### Header Files ############################### 
# Set include directories generated by the STM32CubeMX
set(CUBEMX_INCLUDE_DIRECTORIES
    ${CMAKE_CURRENT_SOURCE_DIR}/Core/Inc
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/${MCU_FAMILY}_HAL_Driver/Inc
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/${MCU_FAMILY}_HAL_Driver/Inc/Legacy
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/CMSIS/Device/ST/${MCU_FAMILY}/Include
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/CMSIS/Include
)
# Set project include directories
set(PROJECT_INCLUDE_DIRECTORIES
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_DIR}
)

############################### Source Files ############################### 
# Grab all library files from core & drivers directory
# Alternativley add each source file individually
file(GLOB_RECURSE STM32CUBEMX_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/Core/*.c
    ${CMAKE_CURRENT_SOURCE_DIR}/Drivers/*.c
)
# Grab all project files from the directory & follow symbolic links
file(GLOB_RECURSE PROJECT_SOURCES FOLLOW_SYMLINKS
    ${PROJECT_DIR}/*.cpp
    ${PROJECT_DIR}/*.c
)

############################### Executables ############################### 
add_executable(${EXECUTABLE}
    ${STM32CUBEMX_SOURCES} 
    ${PROJECT_SOURCES}
    ${STARTUP_SCRIPT}
)

# Grab Hardware abstraction layer definitions for the MCU Model
target_compile_definitions(${EXECUTABLE} PRIVATE
    ${MCU_MODEL}
    USE_HAL_DRIVER)

# Add include directories
target_include_directories(${EXECUTABLE} PRIVATE
    ${CUBEMX_INCLUDE_DIRECTORIES}
    ${PROJECT_INCLUDE_DIRECTORIES})

################################  Compiler & Linker ############################### 
target_compile_options(${EXECUTABLE} PRIVATE
                        ${CPU_PARAMETERS}
                        -Wall                               # All warnings
                        -Wextra                             # Extra Warnings
                        -Wpedantic                          # Issue all the warnings demanded by strict ISO C and ISO C++
                        -Wno-unused-parameter               # Do not warn if parameter to function is not used
                        $<$<COMPILE_LANGUAGE:CXX>:          # For CPP
                            -Wno-volatile                   #
                            -Wold-style-cast                #
                            -Wuseless-cast                  #
                            -Wsuggest-override>             #
                        $<$<CONFIG:Debug>:-Og -g3 -ggdb>    #
                        $<$<CONFIG:Release>:-Og -g0>        #
)

target_link_options(${EXECUTABLE} PRIVATE
                    -T${MCU_LINKER_SCRIPT}
                    ${CPU_PARAMETERS}
                    -Wl,-Map=${CMAKE_PROJECT_NAME}.map
                    --specs=nosys.specs
                    -Wl,--start-group
                    -lc                                     # Add c library
                    -lm                                     # Add math library
                    -lstdc++                                # Add std c++ library - provides run-time support for user-space C++ applications.
                    -lsupc++                                # Add support library for g++ run-time type information (RTTI) and exception handling.
                    -Wl,--end-group
                    -Wl,--print-memory-usage
)

################################ Commands ############################### 
add_custom_command(TARGET ${EXECUTABLE} POST_BUILD
    COMMAND ${CMAKE_SIZE} $<TARGET_FILE:${EXECUTABLE}>
)

# Generate hex and binary files
add_custom_command(TARGET ${EXECUTABLE} POST_BUILD
    COMMAND ${CMAKE_OBJCOPY} -O ihex $<TARGET_FILE:${EXECUTABLE}>
    ${EXECUTABLE}.hex
    COMMAND ${CMAKE_OBJCOPY} -O binary $<TARGET_FILE:${EXECUTABLE}>
    ${EXECUTABLE}.bin
)
